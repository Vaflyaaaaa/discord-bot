import disnake
from disnake.ext import commands
import datetime
import config
from datetime import datetime, timezone
from disnake.utils import utcnow

class LoggerCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    async def log(self, message: str):
        channel = self.bot.get_channel(config.LOG_CHANNEL_ID)
        if channel:
            now = datetime.utcnow()
            formatted_time = now.strftime("%Y-%m-%d %H:%M:%S")
            mes = f"`{formatted_time}` | {message}"
            await channel.send(mes)
        else:
            print("–õ–æ–≥-–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")


    @commands.Cog.listener()
    async def on_message_delete(self, message):
        if message.author.bot:
            return
        text = f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.author} (ID: {message.author.id}) —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.content}"
        await self.log(text)

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        if before.author.bot:
            return
        
        if before.content == after.content:
            return
        
        text = (f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {before.author} (ID: {before.author.id}) –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {before.channel.mention}:\n"
                f"–î–æ:\n" f"> {before.content}" + f"\n–ü–æ—Å–ª–µ:\n" f"> {after.content}")
        await self.log(text)

    @commands.Cog.listener()
    async def on_member_join(self, member):
        text = f"ü§ù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} (ID: {member.id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        await self.log(text)

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        text = f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} (ID: {member.id}) –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä"
        await self.log(text)

    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        if before.bot:
            return
        
        changes = []
        if before.nick != after.nick:
            changes.append(f"–°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —Å '{before.nick}' –Ω–∞ '{after.nick}'")

        if before.roles != after.roles:
            removed = set(before.roles) - set(after.roles)
            added = set(after.roles) - set(before.roles)
            if removed:
                changes.append("> –ë—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å: " + ", ".join(r.name for r in removed))
            if added:
                changes.append("> –ë—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å: " + ", ".join(r.name for r in added))
        if changes:
            text = f"‚öôÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {after} (ID: {after.id}) –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n{', '.join(changes)}"
            await self.log(text)
    
    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel):
        text = f"üì• –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª {channel.name} ({channel.mention})"
        await self.log(text)

    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        text = f"üì§ –£–¥–∞–ª—ë–Ω –∫–∞–Ω–∞–ª {channel.name}"
        await self.log(text)

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        if member.bot:
            return

        guild = member.guild
        event_time = disnake.utils.utcnow()

        mute_changed = (before.mute != after.mute) or (before.self_mute != after.self_mute)
        deaf_changed = (before.deaf != after.deaf) or (before.self_deaf != after.self_deaf)

        admin_user = None
        async for entry in guild.audit_logs(limit=20, action=disnake.AuditLogAction.member_update):
            if entry.target.id != member.id:
                continue

            changes = entry.changes
            before_attrs = changes.before
            after_attrs = changes.after

            mute_change = False
            deaf_change = False
            voice_state_change = False

            if before_attrs and after_attrs:
                if hasattr(before_attrs, 'mute') and hasattr(after_attrs, 'mute'):
                    mute_change = before_attrs.mute != after_attrs.mute
                if hasattr(before_attrs, 'deaf') and hasattr(after_attrs, 'deaf'):
                    deaf_change = before_attrs.deaf != after_attrs.deaf
                if hasattr(before_attrs, 'channel') and hasattr(after_attrs, 'channel'):
                    voice_state_change = before_attrs.channel != after_attrs.channel

            time_diff = abs((event_time - entry.created_at).total_seconds())
            if (mute_change or deaf_change or voice_state_change) and time_diff < 10:
                admin_user = entry.user
                break

        changes_list = []
        if mute_changed:
            if before.self_mute != after.self_mute:
                changes_list.append("–ª–æ–∫–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω" if after.self_mute else "–ª–æ–∫–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∏–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω")
            elif before.mute != after.mute:
                changes_list.append("–∞–¥–º–∏–Ω –æ—Ç–∫–ª—é—á–∏–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω" if after.mute else "–∞–¥–º–∏–Ω –≤–∫–ª—é—á–∏–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω")

        if deaf_changed:
            if before.self_deaf != after.self_deaf:
                changes_list.append("–ª–æ–∫–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª –∑–≤—É–∫ –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∞—Ö" if after.self_deaf else "–ª–æ–∫–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∏–ª –∑–≤—É–∫ –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∞—Ö")
            elif before.deaf != after.deaf:
                changes_list.append("–∞–¥–º–∏–Ω –æ—Ç–∫–ª—é—á–∏–ª –∑–≤—É–∫ –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∞—Ö" if after.deaf else "–∞–¥–º–∏–Ω –≤–∫–ª—é—á–∏–ª –∑–≤—É–∫ –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∞—Ö")

        if before.channel != after.channel:
            if before.channel is None and after.channel is not None:
                text = f"üéô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} (ID: {member.id}) –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É {after.channel.name}"
                await self.log(text)

            elif before.channel is not None and after.channel is None:
                if admin_user:
                    text = (f"üéô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user} (ID: {admin_user.id}) –∫–∏–∫–Ω—É–ª "
                            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member} (ID: {member.id}) –∏–∑ –∫–∞–Ω–∞–ª–∞ {before.channel.name}")
                else:
                    text = f"üéô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} (ID: {member.id}) –≤—ã—à–µ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞ {before.channel.name}"
                await self.log(text)

            else:
                if admin_user:
                    text = (f"üéô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user} (ID: {admin_user.id}) –ø–µ—Ä–µ–∫–∏–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                            f"{member} (ID: {member.id}) –∏–∑ –∫–∞–Ω–∞–ª–∞ {before.channel.name} –≤ –∫–∞–Ω–∞–ª {after.channel.name}")
                else:
                    text = (f"üéô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} (ID: {member.id}) –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –∏–∑ –∫–∞–Ω–∞–ª–∞ "
                            f"{before.channel.name} –≤ –∫–∞–Ω–∞–ª {after.channel.name}")
                await self.log(text)

        if changes_list:
            if admin_user:
                text = (f"üéô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user} (ID: {admin_user.id}) –∏–∑–º–µ–Ω–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                        f"{member} (ID: {member.id}) : {', '.join(changes_list)}")
            else:
                text = (f"üéô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} (ID: {member.id}) –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å: {', '.join(changes_list)}")

            await self.log(text)


def setup(bot):
    bot.add_cog(LoggerCog(bot))